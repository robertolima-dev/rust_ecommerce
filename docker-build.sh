#!/bin/bash

# Script para build e deploy da aplica√ß√£o Docker
# Uso: ./docker-build.sh [comando]

set -e

IMAGE_NAME="rust-template"
TAG=${TAG:-"latest"}

case "${1:-help}" in
    "build")
        echo "üî® Construindo imagem Docker..."
        docker build -t ${IMAGE_NAME}:${TAG} .
        echo "‚úÖ Imagem constru√≠da: ${IMAGE_NAME}:${TAG}"
        ;;
    
    "run")
        echo "üöÄ Executando aplica√ß√£o..."
        docker-compose up -d
        echo "‚úÖ Aplica√ß√£o iniciada!"
        echo "üìã URL: http://localhost:8080"
        echo ""
        echo "‚ö†Ô∏è  Lembre-se de configurar as vari√°veis de ambiente:"
        echo "  - DATABASE_URL"
        echo "  - JWT_SECRET"
        echo "  - ELASTICSEARCH_URL"
        echo "  - KEYCLOAK_BASE_URL"
        echo "  - ETC..."
        ;;
    
    "stop")
        echo "üõë Parando aplica√ß√£o..."
        docker-compose down
        echo "‚úÖ Aplica√ß√£o parada!"
        ;;
    
    "logs")
        echo "üìã Exibindo logs..."
        docker-compose logs -f
        ;;
    
    "clean")
        echo "üßπ Limpando containers..."
        docker-compose down
        docker system prune -f
        echo "‚úÖ Limpeza conclu√≠da!"
        ;;
    
    "dev")
        echo "üîß Modo desenvolvimento..."
        docker-compose up --build
        ;;
    
    "prod")
        echo "üöÄ Modo produ√ß√£o..."
        # Build da imagem
        docker build -t ${IMAGE_NAME}:${TAG} .
        
        # Executar apenas a aplica√ß√£o
        docker run -d \
            --name rust-template-prod \
            -p 8080:8080 \
            -e APP_ENVIRONMENT=production \
            -e SERVER_HOST=0.0.0.0 \
            -e SERVER_PORT=8080 \
            -e DATABASE_URL=${DATABASE_URL} \
            -e JWT_SECRET=${JWT_SECRET} \
            -e JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-86400} \
            -e DATABASE_MAX_CONNECTIONS=${DATABASE_MAX_CONNECTIONS:-10} \
            -e ELASTICSEARCH_URL=${ELASTICSEARCH_URL} \
            -e ELASTICSEARCH_INDEX_PREFIX=${ELASTICSEARCH_INDEX_PREFIX} \
            -e KEYCLOAK_BASE_URL=${KEYCLOAK_BASE_URL} \
            -e KEYCLOAK_REALM=${KEYCLOAK_REALM} \
            -e KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID} \
            -e KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET} \
            -e KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME} \
            -e KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD} \
            ${IMAGE_NAME}:${TAG}
        
        echo "‚úÖ Aplica√ß√£o em produ√ß√£o iniciada!"
        echo "üìã URL: http://localhost:8080"
        ;;
    
    "help"|*)
        echo "üìã Uso: ./docker-build.sh [comando]"
        echo ""
        echo "Comandos dispon√≠veis:"
        echo "  build   - Construir imagem Docker"
        echo "  run     - Executar com Docker Compose"
        echo "  stop    - Parar aplica√ß√£o"
        echo "  logs    - Exibir logs"
        echo "  clean   - Limpar containers"
        echo "  dev     - Modo desenvolvimento (logs em tempo real)"
        echo "  prod    - Modo produ√ß√£o (apenas aplica√ß√£o)"
        echo "  help    - Exibir esta ajuda"
        echo ""
        echo "Exemplos:"
        echo "  ./docker-build.sh build"
        echo "  ./docker-build.sh run"
        echo "  TAG=v1.0.0 ./docker-build.sh build"
        echo ""
        echo "‚ö†Ô∏è  Vari√°veis de ambiente necess√°rias:"
        echo "  - DATABASE_URL"
        echo "  - JWT_SECRET"
        echo "  - ELASTICSEARCH_URL"
        echo "  - KEYCLOAK_BASE_URL"
        echo "  - ETC..."
        ;;
esac 